import { AppState, AppStateStatus } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { 
  showInfoToast, 
  showSuccessToast, 
  showWarningToast, 
  showApiToast,
  showNetworkToast 
} from './toastUtils';
import { i18n } from './i18n';
import apiService from '../services/apiService';

interface NotificationConfig {
  enabled: boolean;
  interval: number; // milliseconds
  lastShown?: number;
  key: string;
}

class PeriodicNotificationService {
  private intervals: { [key: string]: NodeJS.Timeout } = {};
  private isAppActive = true;
  private isInitialized = false;
  
  // Default konfigÃ¼rasyonlar (baÅŸlangÄ±Ã§ta enabled: true)
  private configs: { [key: string]: NotificationConfig } = {
    // Cache kullanÄ±m gÃ¼ncelleme
    cacheUpdate: { 
      enabled: true, // BaÅŸlangÄ±Ã§ta aÃ§Ä±k
      interval: 5000, // 5 saniye
      key: 'cache_last_update' 
    },
    
    // BaÅŸarÄ±lÄ± iÅŸlem bildirimleri
    successReminder: { 
      enabled: true, // BaÅŸlangÄ±Ã§ta aÃ§Ä±k
      interval: 60000, // 1 dakika
      key: 'success_reminder' 
    },
    
    // Sistem durumu bildirimleri
    systemStatus: { 
      enabled: true, // BaÅŸlangÄ±Ã§ta aÃ§Ä±k
      interval: 120000, // 2 dakika
      key: 'system_status' 
    },
    
    // Performans ipuÃ§larÄ±
    performanceTips: { 
      enabled: true, // BaÅŸlangÄ±Ã§ta aÃ§Ä±k
      interval: 180000, // 3 dakika
      key: 'performance_tips' 
    },
    
    // KullanÄ±cÄ± aktivite hatÄ±rlatÄ±cÄ±larÄ±
    activityReminder: { 
      enabled: true, // BaÅŸlangÄ±Ã§ta aÃ§Ä±k
      interval: 300000, // 5 dakika
      key: 'activity_reminder' 
    }
  };

  private stats = {
    cacheUsage: 0,
    lastQueryTime: 0,
    queryCount: 0,
    lastActivityTime: Date.now()
  };

  async init() {
    if (this.isInitialized) {
      console.log('ðŸ“± Notification service already initialized');
      return;
    }

    console.log('ðŸ“± Initializing periodic notification service...');
    
    // App state deÄŸiÅŸikliklerini dinle
    this.setupAppStateListener();
    
    // Saved configs'i yÃ¼kle (Ã¶nemli: bu Ã¶nce olmalÄ±)
    await this.loadConfigs();
    
    // NotificationSettingsScreen ayarlarÄ±nÄ± kontrol et
    await this.loadNotificationSettings();
    
    // Sadece aÃ§Ä±k olan bildirimleri baÅŸlat
    this.startPeriodicNotifications();
    
    this.isInitialized = true;
    console.log('ðŸ“± Notification service initialized successfully');
  }

  // NotificationSettingsScreen'den gelen ayarlarÄ± yÃ¼kle
  private async loadNotificationSettings() {
    try {
      const notificationSettings = await AsyncStorage.getItem('notification_settings');
      if (notificationSettings) {
        const settings = JSON.parse(notificationSettings);
        
        console.log('ðŸ“± Loading notification settings:', settings);
        
        // NotificationSettingsScreen'deki toggle durumlarÄ±nÄ± al
        if (settings.notifications !== undefined) {
          // Ä°puÃ§larÄ± (notifications toggle'Ä±)
          const notificationsEnabled = settings.notifications;
          this.configs.performanceTips.enabled = notificationsEnabled;
          this.configs.systemStatus.enabled = notificationsEnabled;
          this.configs.cacheUpdate.enabled = notificationsEnabled;
        }
        
        if (settings.suggestions !== undefined) {
          // Ã–neriler (suggestions toggle'Ä±)
          const suggestionsEnabled = settings.suggestions;
          this.configs.successReminder.enabled = suggestionsEnabled;
          this.configs.activityReminder.enabled = suggestionsEnabled;
        }
        
        console.log('ðŸ“± Updated configs based on settings:', this.configs);
      } else {
        console.log('ðŸ“± No notification settings found, keeping defaults (notifications: ON, suggestions: ON)');
        // Ä°lk kez aÃ§Ä±lÄ±yorsa default olarak hepsi aÃ§Ä±k (zaten configs'te enabled: true)
        // AyarlarÄ± kaydet
        const defaultSettings = {
          notifications: true,  // Ä°puÃ§larÄ± AÃ‡IK
          suggestions: true     // Ã–neriler AÃ‡IK
        };
        
        await AsyncStorage.setItem('notification_settings', JSON.stringify(defaultSettings));
        console.log('ðŸ“± Created default settings (all enabled):', defaultSettings);
      }
    } catch (error) {
      console.error('ðŸ“± Error loading notification settings:', error);
    }
  }

  // Herhangi bir bildirim aÃ§Ä±k mÄ± kontrol et
  private hasAnyEnabledNotifications(): boolean {
    return Object.values(this.configs).some(config => config.enabled);
  }

  private setupAppStateListener() {
    AppState.addEventListener('change', (nextAppState: AppStateStatus) => {
      console.log('ðŸ“± App state changed:', nextAppState);
      
      this.isAppActive = nextAppState === 'active';
      
      if (nextAppState === 'active') {
        this.onAppBecomeActive();
      } else if (nextAppState === 'background') {
        this.onAppGoBackground();
      }
    });
  }

  private async onAppBecomeActive() {
    console.log('ðŸ“± App became active');
    
    // AyarlarÄ± yeniden yÃ¼kle (kullanÄ±cÄ± ayarlarÄ± deÄŸiÅŸtirmiÅŸ olabilir)
    await this.loadNotificationSettings();
    
    // Son aktiviteden 30+ dakika geÃ§tiyse hoÅŸ geldin mesajÄ±
    const lastActivity = await AsyncStorage.getItem('last_activity_time');
    const now = Date.now();
    
    if (lastActivity) {
      const timeDiff = now - parseInt(lastActivity);
      if (timeDiff > 1800000 && this.hasAnyEnabledNotifications()) { // 30 dakika
        showInfoToast(i18n.t('toast.welcome.back'));
      }
    }
    
    // Periyodik bildirimleri yeniden baÅŸlat (sadece aÃ§Ä±k olanlarÄ±)
    this.startPeriodicNotifications();
    
    // Activity time'Ä± gÃ¼ncelle
    await AsyncStorage.setItem('last_activity_time', now.toString());
  }

  private onAppGoBackground() {
    console.log('ðŸ“± App went to background');
    
    // TÃ¼m interval'leri durdur (battery optimization)
    this.stopAllNotifications();
  }

  private async loadConfigs() {
    try {
      const savedConfigs = await AsyncStorage.getItem('notification_configs');
      if (savedConfigs) {
        const parsed = JSON.parse(savedConfigs);
        this.configs = { ...this.configs, ...parsed };
        console.log('ðŸ“± Loaded saved configs:', this.configs);
      }
    } catch (error) {
      console.error('Config loading error:', error);
    }
  }

  private async saveConfigs() {
    try {
      await AsyncStorage.setItem('notification_configs', JSON.stringify(this.configs));
    } catch (error) {
      console.error('Config saving error:', error);
    }
  }

  private startPeriodicNotifications() {
    if (!this.isAppActive) {
      console.log('ðŸ“± App not active, skipping notifications');
      return;
    }

    // Ä°puÃ§larÄ± (notifications) kapalÄ±ysa TÃœM periyodik bildirimleri durdur
    const notificationsEnabled = this.configs.performanceTips.enabled || this.configs.systemStatus.enabled || this.configs.cacheUpdate.enabled;
    
    if (!notificationsEnabled) {
      console.log('ðŸ“± Ä°puÃ§larÄ± disabled, stopping ALL periodic notifications (including suggestions)');
      return;
    }

    // Sadece aÃ§Ä±k olan bildirimleri say
    const enabledNotifications = Object.entries(this.configs)
      .filter(([_, config]) => config.enabled)
      .map(([key, _]) => key);

    console.log('ðŸ“± Starting periodic notifications for:', enabledNotifications);

    // Sadece aÃ§Ä±k olan bildirimleri baÅŸlat
    this.scheduleNotification('cacheUpdate', () => {
      this.updateCacheUsage();
    });

    this.scheduleNotification('successReminder', () => {
      this.showSuccessReminder();
    });

    this.scheduleNotification('systemStatus', () => {
      this.showSystemStatus();
    });

    this.scheduleNotification('performanceTips', () => {
      this.showPerformanceTip();
    });

    this.scheduleNotification('activityReminder', () => {
      this.showActivityReminder();
    });
  }

  private scheduleNotification(configKey: string, callback: () => void) {
    const config = this.configs[configKey];
    if (!config || !config.enabled) {
      console.log(`ðŸ“± Skipping ${configKey} notification (disabled)`);
      return;
    }

    console.log(`ðŸ“± Scheduling ${configKey} notification every ${config.interval}ms`);

    // Ã–nceki interval'i temizle
    if (this.intervals[configKey]) {
      clearInterval(this.intervals[configKey]);
    }

    // Yeni interval baÅŸlat
    this.intervals[configKey] = setInterval(callback, config.interval);
  }

  private updateCacheUsage() {
    // Sadece enabled ise Ã§alÄ±ÅŸtÄ±r
    if (!this.configs.cacheUpdate.enabled) {
      console.log('ðŸ“± Cache update disabled, skipping');
      return;
    }
    
    this.stats.cacheUsage = this.stats.cacheUsage + Math.random() * 5;
    if (this.stats.cacheUsage > 100) {
      this.stats.cacheUsage = 0;
      showInfoToast(i18n.t('toast.cache.reset'));
    }
  }

  private showSuccessReminder() {
    // Sadece enabled ise Ã§alÄ±ÅŸtÄ±r
    if (!this.configs.successReminder.enabled) {
      console.log('ðŸ“± Success reminder disabled, skipping');
      return;
    }
    
    const tips = [
      'toast.success.reminder1',
      'toast.success.reminder2', 
      'toast.success.reminder3',
      'toast.success.reminder4'
    ];
    
    const randomTip = tips[Math.floor(Math.random() * tips.length)];
    showInfoToast(i18n.t(randomTip));
  }

  private async showSystemStatus() {
    // Sadece enabled ise Ã§alÄ±ÅŸtÄ±r
    if (!this.configs.systemStatus.enabled) {
      console.log('ðŸ“± System status disabled, skipping');
      return;
    }
    
    try {
      const startTime = Date.now();
      const isHealthy = await this.checkApiHealth();
      
      if (isHealthy) {
        const responseTime = Date.now() - startTime;
        
        if (responseTime < 1000) {
          showSuccessToast(i18n.t('toast.system.healthy', { responseTime: responseTime.toString() }));
        } else {
          showWarningToast(i18n.t('toast.system.slow', { responseTime: responseTime.toString() }));
        }
      } else {
        showWarningToast(i18n.t('toast.system.unhealthy'));
      }
    } catch (error) {
      showWarningToast(i18n.t('toast.system.unhealthy'));
    }
  }

  private showPerformanceTip() {
    // Sadece enabled ise Ã§alÄ±ÅŸtÄ±r
    if (!this.configs.performanceTips.enabled) {
      console.log('ðŸ“± Performance tips disabled, skipping');
      return;
    }
    
    const tips = [
      'toast.performance.tip1',
      'toast.performance.tip2', 
      'toast.performance.tip3',
      'toast.performance.tip4'
    ];
    
    const randomTip = tips[Math.floor(Math.random() * tips.length)];
    showInfoToast(i18n.t(randomTip));
  }

  private showActivityReminder() {
    // Sadece enabled ise Ã§alÄ±ÅŸtÄ±r
    if (!this.configs.activityReminder.enabled) {
      console.log('ðŸ“± Activity reminder disabled, skipping');
      return;
    }
    
    const reminders = [
      'toast.activity.reminder1',
      'toast.activity.reminder2',
      'toast.activity.reminder3'
    ];
    
    const randomReminder = reminders[Math.floor(Math.random() * reminders.length)];
    showInfoToast(i18n.t(randomReminder));
  }

  private async checkApiHealth(): Promise<boolean> {
    try {
      // Mock health check
      return true;
    } catch (error) {
      return false;
    }
  }

  // NotificationSettingsScreen'den Ã§aÄŸrÄ±lacak
  async toggleNotification(type: string, enabled: boolean) {
    console.log(`ðŸ“± Toggle notification ${type}: ${enabled}`);
    
    if (this.configs[type]) {
      this.configs[type].enabled = enabled;
      await this.saveConfigs();
      
      if (enabled) {
        console.log(`ðŸ“± Enabling notification: ${type}`);
        this.scheduleNotification(type, this.getCallbackForType(type));
      } else {
        console.log(`ðŸ“± Disabling notification: ${type}`);
        if (this.intervals[type]) {
          clearInterval(this.intervals[type]);
          delete this.intervals[type];
        }
      }
    }
  }

  // NotificationSettingsScreen'deki "Ä°puÃ§larÄ±" toggle'Ä±
  async toggleAllNotifications(enabled: boolean) {
    console.log(`ðŸ“± toggleAllNotifications called with: ${enabled}`);
    
    // Ä°puÃ§larÄ± kategorisindeki tÃ¼m bildirimleri aÃ§/kapat
    this.configs.performanceTips.enabled = enabled;
    this.configs.systemStatus.enabled = enabled;
    this.configs.cacheUpdate.enabled = enabled;
    
    console.log('ðŸ“± Updated notification configs:', {
      performanceTips: this.configs.performanceTips.enabled,
      systemStatus: this.configs.systemStatus.enabled,
      cacheUpdate: this.configs.cacheUpdate.enabled
    });
    
    // AsyncStorage'a kaydet (NotificationSettingsScreen ile senkron)
    const currentSettings = await AsyncStorage.getItem('notification_settings');
    const settings = currentSettings ? JSON.parse(currentSettings) : {};
    
    settings.notifications = enabled;
    
    await AsyncStorage.setItem('notification_settings', JSON.stringify(settings));
    console.log('ðŸ“± Saved notification settings to AsyncStorage:', settings);
    
    // AyarlarÄ± yeniden yÃ¼kle ve servisi gÃ¼ncelle
    await this.reloadAndRestartService();
  }

  // NotificationSettingsScreen'deki "Ã–neriler" toggle'Ä±
  async toggleSuggestions(enabled: boolean) {
    console.log(`ðŸ“± toggleSuggestions called with: ${enabled}`);
    
    // Ã–neriler kategorisindeki tÃ¼m bildirimleri aÃ§/kapat
    this.configs.successReminder.enabled = enabled;
    this.configs.activityReminder.enabled = enabled;
    
    console.log('ðŸ“± Updated suggestion configs:', {
      successReminder: this.configs.successReminder.enabled,
      activityReminder: this.configs.activityReminder.enabled
    });
    
    // AsyncStorage'a kaydet (NotificationSettingsScreen ile senkron)
    const currentSettings = await AsyncStorage.getItem('notification_settings');
    const settings = currentSettings ? JSON.parse(currentSettings) : {};
    
    settings.suggestions = enabled;
    
    await AsyncStorage.setItem('notification_settings', JSON.stringify(settings));
    console.log('ðŸ“± Saved suggestion settings to AsyncStorage:', settings);
    
    // AyarlarÄ± yeniden yÃ¼kle ve servisi gÃ¼ncelle
    await this.reloadAndRestartService();
  }

  // AyarlarÄ± yeniden yÃ¼kle ve servisi gÃ¼ncelle
  private async reloadAndRestartService() {
    console.log('ðŸ“± Reloading service with new settings...');
    
    // TÃ¼m interval'leri durdur
    this.stopAllNotifications();
    
    // AyarlarÄ± yeniden yÃ¼kle
    await this.loadNotificationSettings();
    
    // Servisi yeniden baÅŸlat (sadece aÃ§Ä±k olanlarla)
    this.startPeriodicNotifications();
  }

  private getCallbackForType(type: string): () => void {
    switch (type) {
      case 'cacheUpdate':
        return () => this.updateCacheUsage();
      case 'successReminder':
        return () => this.showSuccessReminder();
      case 'systemStatus':
        return () => this.showSystemStatus();
      case 'performanceTips':
        return () => this.showPerformanceTip();
      case 'activityReminder':
        return () => this.showActivityReminder();
      default:
        return () => {};
    }
  }

  getNotificationSettings() {
    return Object.entries(this.configs).map(([key, config]) => ({
      id: key,
      name: key,
      enabled: config.enabled,
      interval: config.interval
    }));
  }

  isNotificationEnabled(type: string): boolean {
    return this.configs[type]?.enabled || false;
  }

  // Ä°puÃ§larÄ± grubu aÃ§Ä±k mÄ±?
  isNotificationsEnabled(): boolean {
    return this.configs.performanceTips.enabled || this.configs.systemStatus.enabled || this.configs.cacheUpdate.enabled;
  }

  // Ã–neriler grubu aÃ§Ä±k mÄ±?
  isSuggestionsEnabled(): boolean {
    return this.configs.successReminder.enabled || this.configs.activityReminder.enabled;
  }

  stopAllNotifications() {
    Object.keys(this.intervals).forEach(key => {
      clearInterval(this.intervals[key]);
      delete this.intervals[key];
    });
    console.log('ðŸ“± All periodic notifications stopped');
  }

  destroy() {
    this.stopAllNotifications();
    this.isInitialized = false;
    console.log('ðŸ“± Notification service destroyed');
  }

  getStatus() {
    return {
      isInitialized: this.isInitialized,
      isAppActive: this.isAppActive,
      activeIntervals: Object.keys(this.intervals).length,
      configs: this.configs,
      stats: this.stats,
      hasEnabledNotifications: this.hasAnyEnabledNotifications()
    };
  }

  updateLanguage(language: string) {
    console.log('ðŸ“± Updating notification service language:', language);
  }

  updateQueryStats(resultCount: number) {
    this.stats.queryCount += 1;
    this.stats.lastActivityTime = Date.now();
    console.log('ðŸ“± Query stats updated:', { resultCount, totalQueries: this.stats.queryCount });
  }
}

export const periodicNotificationService = new PeriodicNotificationService();